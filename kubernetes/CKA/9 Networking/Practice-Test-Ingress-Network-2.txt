controlplane $ kubectl get deployments.apps --all-namespaces
NAMESPACE     NAME              READY   UP-TO-DATE   AVAILABLE   AGE
app-space     default-backend   1/1     1            1           2m14s
app-space     webapp-video      1/1     1            1           2m14s
app-space     webapp-wear       1/1     1            1           2m15s
kube-system   coredns           2/2     2            2           2m58s
controlplane $ kubectl create ns ingress-space
namespace/ingress-space created
controlplane $ kubectl create cm nginx-configuration
configmap/nginx-configuration created
controlplane $ kubectl delete cm nginx-configuration
configmap "nginx-configuration" deletedcontrolplane $ kubectl create cm nginx-configuration -n ingress-space
configmap/nginx-configuration createdcontrolplane $ kubectl create sa ingress-serviceaccount -n ingress-space
serviceaccount/ingress-serviceaccount createdcontrolplane $ kubectl -n ingress-space get roles.rbac.authorization.k8s.io
NAME           CREATED ATingress-role   2021-01-25T09:41:17Z
controlplane $ kubectl -n ingress-space get rolebindings.rbac.authorization.k8s.ioNAME                   ROLE                AGE
ingress-role-binding   Role/ingress-role   53scontrolplane $ vi /root/ingress-controller.yaml
controlplane $ cat /root/ingress-controller.yaml
---apiVersion: extensions/v1beta1
kind: Deploymentmetadata:
  name: ingress-controller  namespace: ingress-space
spec:  replicas: 1
  selector:    matchLabels:
      name: nginx-ingress  template:
    metadata:      labels:
        name: nginx-ingress
    spec:
      serviceAccountName: ingress-serviceaccount
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --default-backend-service=app-space/default-http-backend
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
                containerPort: 80
            - name: https
              containerPort: 443
controlplane $ kubectl apply -f /root/ingress-controller.yaml
error: error parsing /root/ingress-controller.yaml: error converting YAML to JSON: yaml: line 36: mapping values are not allowed in this context
controlplane $ vi /root/ingress-controller.yaml
controlplane $ kubectl apply -f /root/ingress-controller.yaml
error: unable to recognize "/root/ingress-controller.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"
controlplane $ kubectl apply -f /root/ingress-controller.yaml
error: unable to recognize "/root/ingress-controller.yaml": no matches for kind "Deployment" in version "extensions/v1beta1"
controlplane $ vi /root/ingress-controller.yaml
controlplane $ kubectl apply -f /root/ingress-controller.yaml
deployment.apps/ingress-controller created
controlplane $ kubectl -n ingress-space expose deployment ingress-controller --name ingress --port 80 --target-port 80 --type NodePort --dry-run=client -o yaml > ingress-svc.yaml
controlplane $ vi ingress-svc.yaml
controlplane $ cat ingress-svc.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  name: ingress
  namespace: ingress-space
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
    nodePort: 30080
  selector:
    name: nginx-ingress
  type: NodePort
status:
  loadBalancer: {}
controlplane $ kubectl apply -f ingress-svc.yaml
service/ingress created
controlplane $ kubectl -n ingress-space get svc
NAME      TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
ingress   NodePort   10.96.238.181   <none>        80:30080/TCP   22s
controlplane $ vi ingress-resource.yaml\
> ^C
controlplane $ vi ingress-resource.yaml
controlplane $ kubectl get svc -n app-space
NAME                   TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE
default-http-backend   ClusterIP   10.109.184.66    <none>        80/TCP     21m
video-service          ClusterIP   10.111.102.175   <none>        8080/TCP   21m
wear-service           ClusterIP   10.104.52.170    <none>        8080/TCP   21m
controlplane $ vi ingress-resource.yaml
controlplane $ cat ingress-resource.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: app-space
  name: minimal-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /wear
        pathType: Prefix
        backend:
          service:
            name: wear-service
            port:
              number: 8080
controlplane $ vi ingress-resource.yaml
controlplane $ kubectl apply -f ingress-resource.yaml
ingress.networking.k8s.io/minimal-ingress created
controlplane $ kubectl -n app-space describe ingress test-ingress
Warning: extensions/v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io/v1 Ingress
Error from server (NotFound): ingresses.extensions "test-ingress" not found
controlplane $ kubectl -n app-space describe ingres minimal-ingress
error: the server doesn't have a resource type "ingres"
controlplane $ kubectl -n app-space describe ingress minimal-ingress
Warning: extensions/v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io/v1 Ingress
Name:             minimal-ingress
Namespace:        app-space
Address:
Default backend:  default-http-backend:80 (<error: endpoints "default-http-backend" not found>)
Rules:
  Host        Path  Backends
  ----        ----  --------
  *
              /wear    wear-service:8080    10.244.1.5:8080)
              /watch   video-service:8080   10.244.1.3:8080)
Annotations:  nginx.ingress.kubernetes.io/rewrite-target: /
Events:
  Type    Reason  Age   From                      Message
  ----    ------  ----  ----                      -------
  Normal  CREATE  52s   nginx-ingress-controller  Ingress app-space/minimal-ingress
  Normal  UPDATE  32s   nginx-ingress-controller  Ingress app-space/minimal-ingress
controlplane $