controlplane $
controlplane $
controlplane $ kubectl get pod
NAME          READY   STATUS    RESTARTS   AGE
app-1-flz65   1/1     Running   0          24s
app-1-v9tmd   1/1     Running   0          24s
app-1-zzv2l   1/1     Running   0          24s
app-1-zzxdf   1/1     Running   0          23s
app-2-htcw8   1/1     Running   0          24s
auth          1/1     Running   0          23s
db-1-4tsl9    1/1     Running   0          24s
db-1-n2wnl    1/1     Running   0          24s
db-1-pz249    1/1     Running   0          24s
db-1-wpqh7    1/1     Running   0          24s
db-2-xqn9l    1/1     Running   0          24s
controlplane $ kubectl get pods --selector env=dev
NAME          READY   STATUS    RESTARTS   AGE
app-1-flz65   1/1     Running   0          69s
app-1-v9tmd   1/1     Running   0          69s
app-1-zzv2l   1/1     Running   0          69s
db-1-4tsl9    1/1     Running   0          69s
db-1-n2wnl    1/1     Running   0          69s
db-1-pz249    1/1     Running   0          69s
db-1-wpqh7    1/1     Running   0          69s
controlplane $ kubectl get pods --show-labels --selector env=dev
NAME          READY   STATUS    RESTARTS   AGE   LABELS
app-1-flz65   1/1     Running   0          88s   bu=finance,env=dev,tier=frontend
app-1-v9tmd   1/1     Running   0          88s   bu=finance,env=dev,tier=frontend
app-1-zzv2l   1/1     Running   0          88s   bu=finance,env=dev,tier=frontend
db-1-4tsl9    1/1     Running   0          88s   env=dev,tier=db
db-1-n2wnl    1/1     Running   0          88s   env=dev,tier=db
db-1-pz249    1/1     Running   0          88s   env=dev,tier=db
db-1-wpqh7    1/1     Running   0          88s   env=dev,tier=db
controlplane $ kubectl get pods --show-labels --selector bu=finance
NAME          READY   STATUS    RESTARTS   AGE     LABELS
app-1-flz65   1/1     Running   0          2m15s   bu=finance,env=dev,tier=frontend
app-1-v9tmd   1/1     Running   0          2m15s   bu=finance,env=dev,tier=frontend
app-1-zzv2l   1/1     Running   0          2m15s   bu=finance,env=dev,tier=frontend
app-1-zzxdf   1/1     Running   0          2m14s   bu=finance,env=prod,tier=frontend
auth          1/1     Running   0          2m14s   bu=finance,env=prod
db-2-xqn9l    1/1     Running   0          2m15s   bu=finance,env=prod,tier=db
controlplane $ kubectl get pods --show-labels --selector env=production
No resources found in default namespace.
controlplane $ kubectl get --show-labels --selector env=production
You must specify the type of resource to get. Use "kubectl api-resources" for a complete list of supported resources.

error: Required resource not specified.
Use "kubectl explain <resource>" for a detailed description of that resource (e.g. kubectl explain pods).
See 'kubectl get -h' for help and examples
controlplane $ kubectl get -h
Display one or many resources

 Prints a table of the most important information about the specified resources. You can filter the list using a label
selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current
namespace unless you pass --all-namespaces.

 Uninitialized objects are not shown unless --include-uninitialized is passed.

 By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter
the attributes of the fetched resources.

Use "kubectl api-resources" for a complete list of supported resources.

Examples:
  # List all pods in ps output format.
  kubectl get pods

  # List all pods in ps output format with more information (such as node name).
  kubectl get pods -o wide

  # List a single replication controller with specified NAME in ps output format.
  kubectl get replicationcontroller web

  # List deployments in JSON output format, in the "v1" version of the "apps" API group:
  kubectl get deployments.v1.apps -o json

  # List a single pod in JSON output format.
  kubectl get -o json pod web-pod-13je7

  # List a pod identified by type and name specified in "pod.yaml" in JSON output format.
  kubectl get -f pod.yaml -o json

  # List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml.
  kubectl get -k dir/

  # Return only the phase value of the specified pod.
  kubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}

  # List resource information in custom columns.
  kubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image

  # List all replication controllers and services together in ps output format.
  kubectl get rc,services

  # List one or more resources by their type and names.
  kubectl get rc/web service/frontend pods/web-pod-13je7

Options:
  -A, --all-namespaces=false: If present, list the requested object(s) across all namespaces. Namespace in current
context is ignored even if specified with --namespace.
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in
the template. Only applies to golang and jsonpath output formats.
      --chunk-size=500: Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and
may change in the future.
      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector
key1=value1,key2=value2). The server only supports a limited number of field queries per type.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to get from a server.
      --ignore-not-found=false: If the requested object does not exist the command will return exit code 0.
  -k, --kustomize='': Process the kustomization directory. This flag can't be used together with -f or -R.
  -L, --label-columns=[]: Accepts a comma separated list of labels that are going to be presented as columns. Names are
case-sensitive. You can also use multiple flag options like -L label1 -L label2...
      --no-headers=false: When using the default or custom-column output format, don't print headers (default print
headers).
  -o, --output='': Output format. One of:
json|yaml|wide|name|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...
See custom columns [http://kubernetes.io/docs/user-guide/kubectl-overview/#custom-columns], golang template
[http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template
[http://kubernetes.io/docs/user-guide/jsonpath].
      --output-watch-events=false: Output watch event objects when --watch or --watch-only is used. Existing objects are
output as initial ADDED events.
      --raw='': Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage
related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
      --server-print=true: If true, have the server return the appropriate table output. Supports extension APIs and
CRDs.
      --show-kind=false: If present, list the resource type for the requested object(s).
      --show-labels=false: When printing, show all labels as the last column (default hide labels column)
      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed
as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression
must be an integer or a string.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The
template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
  -w, --watch=false: After listing/getting the requested object, watch for changes. Uninitialized objects are excluded
if no object name is provided.
      --watch-only=false: Watch for changes to the requested object(s), without listing/getting first.

Usage:
  kubectl get
[(-o|--output=)json|yaml|wide|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...]
(TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags] [options]

Use "kubectl options" for a list of global command-line options (applies to all commands).
controlplane $ kubectl get pod, rs --selector env=production
error: arguments in resource/name form must have a single resource and name
controlplane $ kubectl get all --selector env=production
No resources found in default namespace.
controlplane $ kubectl get all --selector env=prod
NAME              READY   STATUS    RESTARTS   AGE
pod/app-1-zzxdf   1/1     Running   0          5m41s
pod/app-2-htcw8   1/1     Running   0          5m42s
pod/auth          1/1     Running   0          5m41s
pod/db-2-xqn9l    1/1     Running   0          5m42s

NAME            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
service/app-1   ClusterIP   10.99.142.134   <none>        3306/TCP   5m41s

NAME                    DESIRED   CURRENT   READY   AGE
replicaset.apps/app-2   1         1         1       5m42s
replicaset.apps/db-2    1         1         1       5m42s
controlplane $ kubectl get pod --selector env=prod bu=finance tier=frontend
error: name cannot be provided when a selector is specified
controlplane $ kubectl get pod --selector env=prod,bu=finance,tier=frontend
NAME          READY   STATUS    RESTARTS   AGE
app-1-zzxdf   1/1     Running   0          7m5s
controlplane $ kubectl apply -f replicaset-definition-1.yaml
The ReplicaSet "replicaset-1" is invalid: spec.template.metadata.labels: Invalid value: map[string]string{"tier":"nginx"}: `selector` does not match template `labels`
controlplane $ vi replicaset-definition-1.yaml
controlplane $ kubectl apply -f replicaset-definition-1.yaml
replicaset.apps/replicaset-1 created
controlplane $ Connection to host01 closed by remote host.
Connection to host01 closed.

The environment has expired.

Please refresh to get a new environment.