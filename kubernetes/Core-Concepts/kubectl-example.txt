Imperative Command

Create Objects
kubectl run --image=nginx nginx

kubectl create deployment --image=nginx nginx

kubectl expose deployment nginx --port 80

Update Objects
kubectl edit deployment nginx

kubectl scale deployment nginx --replicas=5

kubectl set image deployment nginx nginx=nginx:1.18

Create Objects
kubectl create -f nginx.yaml
해당 ojbect 이미있는 경우 생성 실패

Update Objects
kubectl edit deployment nginx
kubectl replace -f nginx.yaml
해당 object 없는 경우 업데이트 실패
kubectl replace --force -f nginx.yaml

kubectl delete -f nginx.yaml



Declarative

Create Objects
kubectl apply -f nginx.yaml

kubectl apply -f /path/to/config-files

Update Objects
kubectl apply -f nginx.yaml


Create an Nginx Pod
kubectl run nginx --image=nginx

Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)
kubectl run nginx --image=nginx --dry-run=client -o yaml > file.yaml

Create a deployment
kubectl create deployment --image=nginx nginx

Generate Deployment Yaml file (-o yaml) Don't create it(--dry-run)
kubectl create deployment --image=nginx nginx --dry-run -o yaml

Generate Deployment with 4 Replicas
kubectl cretae deployment nginx --image=nginx --replicas=4

You can also scale a deployment using the kubectl scale command.
kubectl scale deploymente nginx --replicas=4

Another way to do this it to save YAML definition to a file
kubectl create deployment nginx --image=nginx --dry-run=client -o yaml > nginx-deployment.yaml
You can then update the YAML file with the replicas or any other field before creating the deployment.


Service
Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml > svc.yaml
(This will automatically use the pod's labels as selectors)

Or

kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml > svc.yaml
kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml  (This will not use the pods labels as selectors, instead it will assume selectors as app=redis. You cannot pass in selectors as an option. So it does not work very well if your pod has a different label set. So generate the file and modify the selectors before creating the service)

Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:
kubectl expose pod nginx --port=80 --name nginx-service --type=NodePort --dry-run=client -o yaml

(This will automatically use the pod's labels as selectors, but you cannot specify the node port. You have to generate a definition file and then add the node port in manually before creating the service with the pod.)

Or

kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml

(This will not use the pods labels as selectors)

Both the above commands have their own challenges. While one of it cannot accept a selector the other cannot accept a node port. I would recommend going with the `kubectl expose` command. If you need to specify a node port, generate a definition file using the same command and manually input the nodeport before creating the service.

