
다형성
    운전자 - 자동차
        운전자 역할 -- 자동차 역할 (interface)

        자동차 구현 --- K3, 아반떼, 테슬라 모델3 (자동차 구현 - object)

        자동자가 변경되어도 운전자는 변경될 필요가 없다. (자동차가 변경되어도 면허를 다시 따야하는 것은 아니다.)

        새로운 자동차가 나와도 운전자는 변경할 필요가 없다
        새로운 객체가 나와도 클라이언트는 변경할 필요가 없다.

    공연 무대
        역할은 다른 배우로 대체가 가능해야 한다.
    로미오 역할      줄리엣 역할
        장동건          김태희
        원빈            송혜교

    로미오 (클라이언트)  -----  줄리엣 (서버)
    클라이언트와 서버는 서로 영향을 주지 않고 다른 기술로 대체 가능하다

    키보드, 마웃, 표준 인터페이스들

    정렬 알로리즘 - 기능이 동일하면 더 좋은 알고리즘으로 변경...
    
    할인 정책 로직 - 할인 하는 로직 사용하는 부분에 영향 없이 변경 가능

    역할과 구현으로 구분하면 > 단순, 유연, 변경도 편리해진다.

    클라이언트는
        대상의 역할(인터페이스)만 알면 된다.
            핸들 돌리기, 방향 전환, 등등..
        구현 대상의 내부 구조를 몰라도 된다.
        구현 대상의 내구 구조가 변경되어도 영향을 받지 않는다.
        구현 대상 자체를 변경해도 영향을 받지 않는다.
    
    역할과 구현을 분리
        자바 언어
            역할 - 인터페이스
            구현 - 인터페이스를 구현한 클래스, 구현 객체
        객체를 설계할때 역할과 구현을 명확하게 분리
        객체 설계시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기
    
    객체의 협력이라는 관계부터 생각
        혼자 있는 객체는 없다.
        클라이언트 : 요청 / 서버 : 응답
        수많은 객체 클라이언트와 객체 서버는 서로 협력 관계를 가진다.
    
    자바 언어의 다형성
        오버라이딩
        오버라이딩된 메서드가 실행(실제 동작 구현한)
        다형성으로 인터페이스를 구현한 객체를 실행 시점에 유연하게 변경할 수 있다.

        물론 클래스 상속 관계도 다형성, 오버라이딩 적용가능
    
    다형성의 본질
        인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있다.
        다형성의 본질을 이해하려면 협력이라는 객체 사이의 관계에서 시작해야함
        클라이언트를 변경하지 않고, 서버의 구현 기능을 유현하게 변경할 수 있다.
    
    역할과 구현을 분리
        실세계의 역할과 구현이라는 편리한 컨셉을 다형성을 통해 객체 세상으로 가져올 수 있음
        유연하고, 변경이 용이
        확장 가능한 설계
        클라이언트에 영향을 주지 않는 서버 변경 가능
        인터페이스를 안정적으로 잘 설계하는 것이 중요
    
    스프링과 객체 지향
        다형성이 가장 중요하다
        스프링은 다형성을 극대화해서 이용할 수 있게 도와준다
        스프링에서 이야기하는 제어의 역전(IoC), 의존관계 주입(DI)은 다형성을 활용해서 역할과 구현을 편리하게 다룰수 있도록 지원한다
        스프링을 사용하면 마치 레고 블럭 조립하듯이 공연 무대의 배우를 선택하듯이 구현을 편리하게 변경할 수 있다.